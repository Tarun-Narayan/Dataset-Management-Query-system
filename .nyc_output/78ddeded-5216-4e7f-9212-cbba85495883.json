{"C:\\Users\\David McPhail\\project_team222\\src\\controller\\IInsightFacade.ts":{"path":"C:\\Users\\David McPhail\\project_team222\\src\\controller\\IInsightFacade.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":113}},"2":{"start":{"line":5,"column":0},"end":{"line":8,"column":89}},"3":{"start":{"line":6,"column":4},"end":{"line":6,"column":48}},"4":{"start":{"line":7,"column":4},"end":{"line":7,"column":42}},"5":{"start":{"line":11,"column":8},"end":{"line":11,"column":23}},"6":{"start":{"line":12,"column":8},"end":{"line":12,"column":52}},"7":{"start":{"line":15,"column":0},"end":{"line":15,"column":36}},"8":{"start":{"line":18,"column":8},"end":{"line":18,"column":23}},"9":{"start":{"line":19,"column":8},"end":{"line":19,"column":53}},"10":{"start":{"line":22,"column":0},"end":{"line":22,"column":38}},"11":{"start":{"line":25,"column":8},"end":{"line":25,"column":23}},"12":{"start":{"line":26,"column":8},"end":{"line":26,"column":59}},"13":{"start":{"line":29,"column":0},"end":{"line":29,"column":50}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":5,"column":1},"end":{"line":5,"column":2}},"loc":{"start":{"line":5,"column":31},"end":{"line":8,"column":1}},"line":5},"1":{"name":"(anonymous_1)","decl":{"start":{"line":10,"column":4},"end":{"line":10,"column":5}},"loc":{"start":{"line":10,"column":25},"end":{"line":13,"column":5}},"line":10},"2":{"name":"(anonymous_2)","decl":{"start":{"line":17,"column":4},"end":{"line":17,"column":5}},"loc":{"start":{"line":17,"column":25},"end":{"line":20,"column":5}},"line":17},"3":{"name":"(anonymous_3)","decl":{"start":{"line":24,"column":4},"end":{"line":24,"column":5}},"loc":{"start":{"line":24,"column":25},"end":{"line":27,"column":5}},"line":24}},"branchMap":{"0":{"loc":{"start":{"line":8,"column":24},"end":{"line":8,"column":87}},"type":"binary-expr","locations":[{"start":{"line":8,"column":24},"end":{"line":8,"column":50}},{"start":{"line":8,"column":55},"end":{"line":8,"column":86}}],"line":8}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":29,"6":29,"7":1,"8":0,"9":0,"10":1,"11":0,"12":0,"13":1},"f":{"0":1,"1":29,"2":0,"3":0},"b":{"0":[1,1]},"inputSourceMap":{"version":3,"file":"C:/Users/David McPhail/project_team222/src/controller/IInsightFacade.ts","sources":["C:/Users/David McPhail/project_team222/src/controller/IInsightFacade.ts"],"names":[],"mappings":";;;AAMA,IAAY,kBAGX;AAHD,WAAY,kBAAkB;IAC7B,2CAAqB,CAAA;IACrB,qCAAe,CAAA;AAChB,CAAC,EAHW,kBAAkB,GAAlB,0BAAkB,KAAlB,0BAAkB,QAG7B;AAUD,MAAa,YAAa,SAAQ,KAAK;IACtC,YAAY,OAAgB;QAC3B,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,KAAK,CAAC,iBAAiB,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;IAC7C,CAAC;CACD;AALD,oCAKC;AAED,MAAa,aAAc,SAAQ,KAAK;IACvC,YAAY,OAAgB;QAC3B,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,KAAK,CAAC,iBAAiB,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;IAC9C,CAAC;CACD;AALD,sCAKC;AAED,MAAa,mBAAoB,SAAQ,KAAK;IAC7C,YAAY,OAAgB;QAC3B,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,KAAK,CAAC,iBAAiB,CAAC,IAAI,EAAE,mBAAmB,CAAC,CAAC;IACpD,CAAC;CACD;AALD,kDAKC","sourcesContent":["/*\n * This is the primary high-level API for the project. In this folder there should be:\n * A class called InsightFacade, this should be in a file called InsightFacade.ts.\n * You should not change this interface at all or the test suite will not work.\n */\n\nexport enum InsightDatasetKind {\n\tSections = \"sections\",\n\tRooms = \"rooms\",\n}\n\nexport interface InsightDataset {\n\tid: string;\n\tkind: InsightDatasetKind;\n\tnumRows: number;\n}\n\nexport type InsightResult = Record<string, string | number>;\n\nexport class InsightError extends Error {\n\tconstructor(message?: string) {\n\t\tsuper(message);\n\t\tError.captureStackTrace(this, InsightError);\n\t}\n}\n\nexport class NotFoundError extends Error {\n\tconstructor(message?: string) {\n\t\tsuper(message);\n\t\tError.captureStackTrace(this, NotFoundError);\n\t}\n}\n\nexport class ResultTooLargeError extends Error {\n\tconstructor(message?: string) {\n\t\tsuper(message);\n\t\tError.captureStackTrace(this, ResultTooLargeError);\n\t}\n}\n\nexport interface IInsightFacade {\n\t/**\n\t * Add a dataset to insightUBC.\n\t *\n\t * @param id  The id of the dataset being added. Follows the format /^[^_]+$/\n\t * @param content  The base64 content of the dataset. This content should be in the form of a serialized zip file.\n\t * @param kind  The kind of the dataset\n\t *\n\t * @return Promise <string[]>\n\t *\n\t * The promise should fulfill on a successful add, reject for any failures.\n\t * The promise should fulfill with a string array,\n\t * containing the ids of all currently added datasets upon a successful add.\n\t * The promise should reject with an InsightError describing the error.\n\t *\n\t * An id is invalid if it contains an underscore, or is only whitespace characters.\n\t * If id is the same as the id of an already added dataset, the dataset should be rejected and not saved.\n\t *\n\t * After receiving the dataset, it should be processed into a data structure of\n\t * your design. The processed data structure should be persisted to disk; your\n\t * system should be able to load this persisted value into memory for answering\n\t * queries.\n\t *\n\t * Ultimately, a dataset must be added or loaded from disk before queries can\n\t * be successfully answered.\n\t */\n\taddDataset(id: string, content: string, kind: InsightDatasetKind): Promise<string[]>;\n\n\t/**\n\t * Remove a dataset from insightUBC.\n\t *\n\t * @param id  The id of the dataset to remove. Follows the format /^[^_]+$/\n\t *\n\t * @return Promise <string>\n\t *\n\t * The promise should fulfill upon a successful removal, reject on any error.\n\t * Attempting to remove a dataset that hasn't been added yet counts as an error.\n\t *\n\t * An id is invalid if it contains an underscore, or is only whitespace characters.\n\t *\n\t * The promise should fulfill the id of the dataset that was removed.\n\t * The promise should reject with a NotFoundError (if a valid id was not yet added)\n\t * or an InsightError (invalid id or any other source of failure) describing the error.\n\t *\n\t * This will delete both disk and memory caches for the dataset for the id meaning\n\t * that subsequent queries for that id should fail unless a new addDataset happens first.\n\t */\n\tremoveDataset(id: string): Promise<string>;\n\n\t/**\n\t * Perform a query on insightUBC.\n\t *\n\t * @param query  The query to be performed.\n\t *\n\t * If a query is incorrectly formatted, references a dataset not added (in memory or on disk),\n\t * or references multiple datasets, it should be rejected.\n\t *\n\t * @return Promise <InsightResult[]>\n\t *\n\t * The promise should fulfill with an array of results.\n\t * The promise should reject with a ResultTooLargeError (if the query returns too many results)\n\t * or an InsightError (for any other source of failure) describing the error.\n\t */\n\tperformQuery(query: unknown): Promise<InsightResult[]>;\n\n\t/**\n\t * List all currently added datasets, their types, and number of rows.\n\t *\n\t * @return Promise <InsightDataset[]>\n\t * The promise should fulfill an array of currently added InsightDatasets, and will only fulfill.\n\t */\n\tlistDatasets(): Promise<InsightDataset[]>;\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"a1dc04a7e7db4e51a590d970b263e34556a06813","contentHash":"069061f6be12dde93df295157e69026f3ea91d6a91eae7c897d3717c706ff868"},"C:\\Users\\David McPhail\\project_team222\\src\\controller\\InsightFacade.ts":{"path":"C:\\Users\\David McPhail\\project_team222\\src\\controller\\InsightFacade.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":25},"end":{"line":3,"column":52}},"2":{"start":{"line":4,"column":16},"end":{"line":4,"column":34}},"3":{"start":{"line":7,"column":8},"end":{"line":7,"column":130}},"4":{"start":{"line":10,"column":8},"end":{"line":10,"column":92}},"5":{"start":{"line":13,"column":8},"end":{"line":13,"column":34}},"6":{"start":{"line":14,"column":8},"end":{"line":32,"column":9}},"7":{"start":{"line":17,"column":12},"end":{"line":31,"column":13}},"8":{"start":{"line":18,"column":16},"end":{"line":18,"column":64}},"9":{"start":{"line":19,"column":16},"end":{"line":27,"column":17}},"10":{"start":{"line":20,"column":20},"end":{"line":26,"column":21}},"11":{"start":{"line":21,"column":24},"end":{"line":21,"column":62}},"12":{"start":{"line":22,"column":24},"end":{"line":22,"column":38}},"13":{"start":{"line":25,"column":24},"end":{"line":25,"column":51}},"14":{"start":{"line":30,"column":16},"end":{"line":30,"column":43}},"15":{"start":{"line":33,"column":8},"end":{"line":33,"column":88}},"16":{"start":{"line":36,"column":8},"end":{"line":36,"column":18}},"17":{"start":{"line":39,"column":8},"end":{"line":39,"column":77}},"18":{"start":{"line":42,"column":0},"end":{"line":42,"column":32}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":6,"column":4},"end":{"line":6,"column":5}},"loc":{"start":{"line":6,"column":40},"end":{"line":8,"column":5}},"line":6},"1":{"name":"(anonymous_1)","decl":{"start":{"line":9,"column":4},"end":{"line":9,"column":5}},"loc":{"start":{"line":9,"column":28},"end":{"line":11,"column":5}},"line":9},"2":{"name":"(anonymous_2)","decl":{"start":{"line":12,"column":4},"end":{"line":12,"column":5}},"loc":{"start":{"line":12,"column":30},"end":{"line":34,"column":5}},"line":12},"3":{"name":"(anonymous_3)","decl":{"start":{"line":35,"column":4},"end":{"line":35,"column":5}},"loc":{"start":{"line":35,"column":28},"end":{"line":37,"column":5}},"line":35},"4":{"name":"(anonymous_4)","decl":{"start":{"line":38,"column":4},"end":{"line":38,"column":5}},"loc":{"start":{"line":38,"column":25},"end":{"line":40,"column":5}},"line":38}},"branchMap":{"0":{"loc":{"start":{"line":14,"column":8},"end":{"line":32,"column":9}},"type":"if","locations":[{"start":{"line":14,"column":8},"end":{"line":32,"column":9}},{"start":{"line":14,"column":8},"end":{"line":32,"column":9}}],"line":14},"1":{"loc":{"start":{"line":19,"column":16},"end":{"line":27,"column":17}},"type":"if","locations":[{"start":{"line":19,"column":16},"end":{"line":27,"column":17}},{"start":{"line":19,"column":16},"end":{"line":27,"column":17}}],"line":19}},"s":{"0":1,"1":1,"2":1,"3":15,"4":4,"5":27,"6":27,"7":26,"8":26,"9":9,"10":9,"11":9,"12":9,"13":0,"14":17,"15":1,"16":9,"17":0,"18":1},"f":{"0":15,"1":4,"2":27,"3":9,"4":0},"b":{"0":[26,1],"1":[9,0]},"inputSourceMap":{"version":3,"file":"C:/Users/David McPhail/project_team222/src/controller/InsightFacade.ts","sources":["C:/Users/David McPhail/project_team222/src/controller/InsightFacade.ts"],"names":[],"mappings":";;AAAA,qDAO0B;AAC1B,mCAA+C;AAO/C,MAAqB,aAAa;IAC1B,KAAK,CAAC,UAAU,CAAC,EAAU,EAAE,OAAe,EAAE,IAAwB;QAE5E,MAAM,IAAI,KAAK,CACd,0DAA0D,EAAE,aAAa,OAAO,EAAE,MAAM,UAAU,IAAI,EAAE,CACxG,CAAC;IACH,CAAC;IAEM,KAAK,CAAC,aAAa,CAAC,EAAU;QAEpC,MAAM,IAAI,KAAK,CAAC,6DAA6D,EAAE,GAAG,CAAC,CAAC;IACrF,CAAC;IAEM,KAAK,CAAC,YAAY,CAAC,KAAc;QACvC,OAAO,CAAC,GAAG,CAAC,OAAO,KAAK,CAAC,CAAC;QAC1B,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YAC9B,IAAI,MAAuB,CAAC;YAC5B,IAAI,KAAc,CAAC;YACnB,IAAI;gBACH,KAAK,GAAG,MAAM,IAAA,qBAAa,EAAC,KAAc,CAAC,CAAC;gBAC5C,IAAI,KAAK,EAAE;oBACV,IAAI;wBACH,MAAM,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,KAAc,CAAC,CAAC;wBAC/C,OAAO,MAAM,CAAC;qBACd;oBAAC,OAAO,GAAG,EAAE;wBACb,OAAO,OAAO,CAAC,MAAM,CAAC,GAA0B,CAAC,CAAC;qBAClD;iBACD;aACD;YAAC,OAAO,GAAG,EAAE;gBACb,OAAO,OAAO,CAAC,MAAM,CAAC,GAAmB,CAAC,CAAC;aAC3C;SACD;QACD,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,6BAAY,CAAC,qBAAqB,CAAC,CAAC,CAAC;IAChE,CAAC;IAEO,KAAK,CAAC,UAAU,CAAC,KAAY;QACpC,OAAO,EAAE,CAAC;IACX,CAAC;IAEM,KAAK,CAAC,YAAY;QAExB,MAAM,IAAI,KAAK,CAAC,mDAAmD,CAAC,CAAC;IACtE,CAAC;CACD;AA3CD,gCA2CC","sourcesContent":["import {\n\tIInsightFacade,\n\tInsightDataset,\n\tInsightDatasetKind,\n\tInsightError,\n\tInsightResult,\n\tResultTooLargeError,\n} from \"./IInsightFacade\";\nimport { Query, validateQuery } from \"./Query\";\n\n/**\n * This is the main programmatic entry point for the project.\n * Method documentation is in IInsightFacade\n *\n */\nexport default class InsightFacade implements IInsightFacade {\n\tpublic async addDataset(id: string, content: string, kind: InsightDatasetKind): Promise<string[]> {\n\t\t// TODO: Remove this once you implement the methods!\n\t\tthrow new Error(\n\t\t\t`InsightFacadeImpl::addDataset() is unimplemented! - id=${id}; content=${content?.length}; kind=${kind}`\n\t\t);\n\t}\n\n\tpublic async removeDataset(id: string): Promise<string> {\n\t\t// TODO: Remove this once you implement the methods!\n\t\tthrow new Error(`InsightFacadeImpl::removeDataset() is unimplemented! - id=${id};`);\n\t}\n\n\tpublic async performQuery(query: unknown): Promise<InsightResult[]> {\n\t\tconsole.log(typeof query);\n\t\tif (typeof query === \"object\") {\n\t\t\tlet result: InsightResult[];\n\t\t\tlet valid: boolean;\n\t\t\ttry {\n\t\t\t\tvalid = await validateQuery(query as Query);\n\t\t\t\tif (valid) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tresult = await this.getResults(query as Query);\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\treturn Promise.reject(err as ResultTooLargeError);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\treturn Promise.reject(err as InsightError);\n\t\t\t}\n\t\t}\n\t\treturn Promise.reject(new InsightError(\"Query not an object\"));\n\t}\n\n\tprivate async getResults(query: Query): Promise<InsightResult[]> {\n\t\treturn [];\n\t}\n\n\tpublic async listDatasets(): Promise<InsightDataset[]> {\n\t\t// TODO: Remove this once you implement the methods!\n\t\tthrow new Error(`InsightFacadeImpl::listDatasets is unimplemented!`);\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"40115d8f46471f3c810429aec3a8e41b8dccdf72","contentHash":"835361a9619e6712b51ba78aecc8628dbd0724a0619cac225502a7ac6cf96a78"},"C:\\Users\\David McPhail\\project_team222\\src\\controller\\Query.ts":{"path":"C:\\Users\\David McPhail\\project_team222\\src\\controller\\Query.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":31}},"2":{"start":{"line":4,"column":25},"end":{"line":4,"column":52}},"3":{"start":{"line":6,"column":4},"end":{"line":8,"column":5}},"4":{"start":{"line":7,"column":8},"end":{"line":7,"column":64}},"5":{"start":{"line":9,"column":4},"end":{"line":11,"column":5}},"6":{"start":{"line":10,"column":8},"end":{"line":10,"column":67}},"7":{"start":{"line":12,"column":20},"end":{"line":12,"column":51}},"8":{"start":{"line":13,"column":4},"end":{"line":13,"column":19}},"9":{"start":{"line":15,"column":0},"end":{"line":15,"column":38}},"10":{"start":{"line":17,"column":4},"end":{"line":19,"column":5}},"11":{"start":{"line":18,"column":8},"end":{"line":18,"column":20}},"12":{"start":{"line":20,"column":4},"end":{"line":22,"column":5}},"13":{"start":{"line":21,"column":8},"end":{"line":21,"column":47}},"14":{"start":{"line":23,"column":4},"end":{"line":23,"column":66}},"15":{"start":{"line":26,"column":4},"end":{"line":28,"column":5}},"16":{"start":{"line":27,"column":8},"end":{"line":27,"column":75}},"17":{"start":{"line":29,"column":4},"end":{"line":31,"column":5}},"18":{"start":{"line":30,"column":8},"end":{"line":30,"column":73}},"19":{"start":{"line":32,"column":4},"end":{"line":32,"column":79}}},"fnMap":{"0":{"name":"validateQuery","decl":{"start":{"line":5,"column":15},"end":{"line":5,"column":28}},"loc":{"start":{"line":5,"column":36},"end":{"line":14,"column":1}},"line":5},"1":{"name":"validateBody","decl":{"start":{"line":16,"column":15},"end":{"line":16,"column":27}},"loc":{"start":{"line":16,"column":36},"end":{"line":24,"column":1}},"line":16},"2":{"name":"validateLogicComparison","decl":{"start":{"line":25,"column":15},"end":{"line":25,"column":38}},"loc":{"start":{"line":25,"column":47},"end":{"line":33,"column":1}},"line":25}},"branchMap":{"0":{"loc":{"start":{"line":6,"column":4},"end":{"line":8,"column":5}},"type":"if","locations":[{"start":{"line":6,"column":4},"end":{"line":8,"column":5}},{"start":{"line":6,"column":4},"end":{"line":8,"column":5}}],"line":6},"1":{"loc":{"start":{"line":6,"column":8},"end":{"line":6,"column":57}},"type":"binary-expr","locations":[{"start":{"line":6,"column":8},"end":{"line":6,"column":33}},{"start":{"line":6,"column":37},"end":{"line":6,"column":57}}],"line":6},"2":{"loc":{"start":{"line":9,"column":4},"end":{"line":11,"column":5}},"type":"if","locations":[{"start":{"line":9,"column":4},"end":{"line":11,"column":5}},{"start":{"line":9,"column":4},"end":{"line":11,"column":5}}],"line":9},"3":{"loc":{"start":{"line":9,"column":8},"end":{"line":9,"column":61}},"type":"binary-expr","locations":[{"start":{"line":9,"column":8},"end":{"line":9,"column":35}},{"start":{"line":9,"column":39},"end":{"line":9,"column":61}}],"line":9},"4":{"loc":{"start":{"line":17,"column":4},"end":{"line":19,"column":5}},"type":"if","locations":[{"start":{"line":17,"column":4},"end":{"line":19,"column":5}},{"start":{"line":17,"column":4},"end":{"line":19,"column":5}}],"line":17},"5":{"loc":{"start":{"line":20,"column":4},"end":{"line":22,"column":5}},"type":"if","locations":[{"start":{"line":20,"column":4},"end":{"line":22,"column":5}},{"start":{"line":20,"column":4},"end":{"line":22,"column":5}}],"line":20},"6":{"loc":{"start":{"line":20,"column":8},"end":{"line":20,"column":41}},"type":"binary-expr","locations":[{"start":{"line":20,"column":8},"end":{"line":20,"column":23}},{"start":{"line":20,"column":27},"end":{"line":20,"column":41}}],"line":20},"7":{"loc":{"start":{"line":26,"column":4},"end":{"line":28,"column":5}},"type":"if","locations":[{"start":{"line":26,"column":4},"end":{"line":28,"column":5}},{"start":{"line":26,"column":4},"end":{"line":28,"column":5}}],"line":26},"8":{"loc":{"start":{"line":27,"column":15},"end":{"line":27,"column":74}},"type":"binary-expr","locations":[{"start":{"line":27,"column":15},"end":{"line":27,"column":40}},{"start":{"line":27,"column":44},"end":{"line":27,"column":74}}],"line":27},"9":{"loc":{"start":{"line":29,"column":4},"end":{"line":31,"column":5}},"type":"if","locations":[{"start":{"line":29,"column":4},"end":{"line":31,"column":5}},{"start":{"line":29,"column":4},"end":{"line":31,"column":5}}],"line":29},"10":{"loc":{"start":{"line":30,"column":15},"end":{"line":30,"column":72}},"type":"binary-expr","locations":[{"start":{"line":30,"column":15},"end":{"line":30,"column":39}},{"start":{"line":30,"column":43},"end":{"line":30,"column":72}}],"line":30}},"s":{"0":1,"1":1,"2":1,"3":26,"4":1,"5":25,"6":3,"7":22,"8":9,"9":1,"10":33,"11":3,"12":30,"13":6,"14":24,"15":6,"16":4,"17":2,"18":2,"19":0},"f":{"0":26,"1":33,"2":6},"b":{"0":[1,25],"1":[26,25],"2":[3,22],"3":[25,22],"4":[3,30],"5":[6,24],"6":[30,26],"7":[4,2],"8":[4,4],"9":[2,0],"10":[2,2]},"inputSourceMap":{"version":3,"file":"C:/Users/David McPhail/project_team222/src/controller/Query.ts","sources":["C:/Users/David McPhail/project_team222/src/controller/Query.ts"],"names":[],"mappings":";;;AAAA,qDAAgD;AA4BzC,KAAK,UAAU,aAAa,CAAC,KAAY;IAC/C,IAAI,KAAK,CAAC,KAAK,KAAK,SAAS,IAAI,KAAK,CAAC,KAAK,KAAK,IAAI,EAAE;QACtD,MAAM,IAAI,6BAAY,CAAC,cAAc,CAAC,CAAC;KACvC;IACD,IAAI,KAAK,CAAC,OAAO,KAAK,SAAS,IAAI,KAAK,CAAC,OAAO,KAAK,IAAI,EAAE;QAC1D,MAAM,IAAI,6BAAY,CAAC,iBAAiB,CAAC,CAAC;KAC1C;IAED,MAAM,OAAO,GAAG,MAAM,YAAY,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAGhD,OAAO,OAAO,CAAA;AACf,CAAC;AAZD,sCAYC;AAED,KAAK,UAAU,YAAY,CAAC,MAAc;IACzC,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE;QACrC,OAAO,IAAI,CAAC;KACZ;IAED,IAAI,KAAK,IAAI,MAAM,IAAI,IAAI,IAAI,MAAM,EAAE;QACtC,OAAO,uBAAuB,CAAC,MAAyB,CAAC,CAAC;KAC1D;IAWD,MAAM,IAAI,6BAAY,CAAC,oBAAoB,CAAC,CAAC;AAC9C,CAAC;AAED,KAAK,UAAU,uBAAuB,CAAC,MAAuB;IAC7D,IAAI,MAAM,CAAC,GAAG,EAAE;QACf,OAAO,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,YAAY,CAAC,CAAA;KAClE;IACD,IAAI,MAAM,CAAC,EAAE,EAAE;QACd,OAAO,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,MAAM,CAAC,EAAE,CAAC,KAAK,CAAC,YAAY,CAAC,CAAA;KAChE;IAED,MAAM,IAAI,6BAAY,CAAC,iCAAiC,CAAC,CAAA;AAC1D,CAAC","sourcesContent":["import { InsightError } from \"./IInsightFacade\";\n\nexport interface Query extends Object {\n\tWHERE: Filter;\n\tOPTIONS: Options;\n}\ntype Filter = LogicComparison | MComparison | SComparison | Negation | {};\n\ninterface LogicComparison {\n\tAND?: Filter[];\n\tOR?: Filter[];\n}\ninterface MComparison {\n\tEQ?: Record<string, number>;\n\tGT?: Record<string, number>;\n\tLT?: Record<string, number>;\n}\ninterface SComparison {\n\tIS?: Record<string, string>;\n}\ninterface Negation {\n\tNOT?: Filter;\n}\ninterface Options {\n\tCOLUMNS: string[];\n\tORDER?: string;\n}\n\nexport async function validateQuery(query: Query): Promise<boolean> {\n\tif (query.WHERE === undefined || query.WHERE === null) {\n\t\tthrow new InsightError(\"Missing Body\");\n\t}\n\tif (query.OPTIONS === undefined || query.OPTIONS === null) {\n\t\tthrow new InsightError(\"Missing Options\");\n\t}\n\n\tconst result1 = await validateBody(query.WHERE);\n\t//const result2 = await validateOptions(query.OPTIONS);\n\n\treturn result1 // && result2;\n}\n\nasync function validateBody(filter: object): Promise<boolean> {\n\tif (Object.keys(filter).length === 0) {\n\t\treturn true;\n\t}\n\n\tif ('AND' in filter || 'OR' in filter) {\n\t\treturn validateLogicComparison(filter as LogicComparison);\n\t}\n\t//if ('LT' in filter || 'GT' in filter || 'EQ' in filter) {\n\t//\treturn validateMComparison(filter as MComparison);\n\t//}\n\t//if ('IS' in filter) {\n\t//\treturn validateSComparison(filter as SComparison);\n\t//}\n\t//if ('NOT' in filter) {\n\t//\treturn validateNegation(filter as Negation);\n\t//}\n\n\tthrow new InsightError(\"Invalid filter key\");\n}\n\nasync function validateLogicComparison(filter: LogicComparison): Promise<boolean> {\n\tif (filter.AND)\t{\n\t\treturn Array.isArray(filter.AND) && filter.AND.every(validateBody)\n\t}\n\tif (filter.OR) {\n\t\treturn Array.isArray(filter.OR) && filter.OR.every(validateBody)\n\t}\n\n\tthrow new InsightError(\"Invalid Logic Comparison syntax\")\n}\n/*\nasync function validateMComparison(filter: MComparison): Promise<boolean> {\n\tconst mCompares = ['LT', 'GT', 'EQ']\n\tfor (const key of mCompares) {\n\n\t}\n}\n\nasync function validateSComparison(filter: SComparison): Promise<boolean> {}\n\nasync function validateNegation(filter: Negation): Promise<boolean> {}\n\nasync function validateOptions(options: object): Promise<boolean> {}\n*/\n\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"d3b4c0fafddeab497b1732692fa2574c13256ea9","contentHash":"14ec1fa63ca0d28b996e674acfa4d71f8442c9d24ad37e719d76e244cb67c738"}}